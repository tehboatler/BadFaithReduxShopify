import _extends from 'babel-runtime/helpers/extends';
import _Object$assign from 'babel-runtime/core-js/object/assign';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

const CUSTOM_PROPERTY_NAME = '--aspect-ratio';

class AspectRatio extends PureComponent {

  constructor(props) {
    super(props);

    this.updateAspectRatio = (ratio, nextRatio) => {
      if (ratio !== nextRatio) {
        this.setState({
          ratio: nextRatio
        }, () => {
          if (this.node) {
            // BC for older version of React https://github.com/facebook/react/issues/6411
            // check if React support custom property AFTER
            const customPropertyValue = this.node.style.getPropertyValue(CUSTOM_PROPERTY_NAME);
            if (!customPropertyValue) {
              this.node.style.setProperty('--aspect-ratio', nextRatio);
            }
          }
        });
      }
    };

    this.node;

    this.state = {
      ratio: props.ratio
    };
  }

  componentDidMount() {
    this.updateAspectRatio('', this.props.ratio);
  }

  componentWillReceiveProps(nextProps) {
    this.updateAspectRatio(this.props.ratio, nextProps.ratio);
  }

  render() {
    const _props = this.props,
          { ratio, style } = _props,
          others = _objectWithoutProperties(_props, ['ratio', 'style']); // eslint-disable-line no-unused-vars
    const newStyle = _Object$assign({ [CUSTOM_PROPERTY_NAME]: this.state.ratio }, style);

    return React.createElement(
      'div',
      _extends({
        ref: node => {
          this.node = node;
        },
        style: newStyle
      }, others),
      this.props.children
    );
  }
}

AspectRatio.defaultProps = {
  className: 'react-aspect-ratio-placeholder',
  ratio: '1/1'
};
AspectRatio.propTypes = {
  ratio: PropTypes.string.isRequired,
  children: PropTypes.node
};
export default AspectRatio;